name: ci/cd with Best practise

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.11'
  VENV_DIR: '.venv'
  REQUIREMENTS_PATH: 'requirements.txt'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Указываем конкретную версию действия
      - name: Checkout code
        uses: actions/checkout@v2

      # Указываем конкретную версию Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Создаем виртуальное окружение и устанавливаем зависимости
      - name: Install dependencies
        run: |
            python -m venv ${{ env.VENV_DIR }}
            source ${{ env.VENV_DIR }}/bin/activate
            python -m pip install --upgrade pip
            pip install -r ${{ env.REQUIREMENTS_PATH }}

      # Кэшируем зависимости для ускорения установки
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: venv/lib/python*/site-packages
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

  test:
    runs-on: ubuntu-latest
    needs: build  # Зависимость от задания build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Указываем конкретную версию Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment
        run: |
          python -m venv ${{ env.VENV_DIR }}
          source ${{ env.VENV_DIR }}/bin/activate

      - name: Install dependencies
        run: |
          source ${{ env.VENV_DIR }}/bin/activate
          python -m pip install --upgrade pip
          pip install -r ${{ env.REQUIREMENTS_PATH }}

      - name: Run tests
        run: |
          source ${{ env.VENV_DIR }}/bin/activate
          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Зависимость от задания test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Указываем конкретную версию Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Проверяем успешность выполнения предыдущих шагов перед развертыванием
      - name: Build and deploy
        run: |
          source venv/bin/activate  # Активируем виртуальное окружение перед сборкой
          echo "Building the project..."  
          
